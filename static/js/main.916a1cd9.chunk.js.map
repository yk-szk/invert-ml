{"version":3,"sources":["index.tsx"],"names":["parse","require","iconv","MyDropzone","props","onDrop","useCallback","useDropzone","getRootProps","getInputProps","isDragActive","className","App","state","col_key","col_value","rows","Map","handleChange","bind","acceptedFiles","file","reader","FileReader","onabort","alert","onerror","onload","binaryStr","result","decodedStr","decode","header","body","parser","delimiter","skipEmptyLines","on","record","Boolean","read","length","push","err","message","console","log","key_col_name","value_col_name","col_ml_addr","findIndex","name","col_ml_member","addr2ml","keys","values","uniq_values","Set","reduce","sum","e","concat","all_values","Array","from","sort","inverted","map","value","key","key_index","get","invert","row","split","filter","setState","write","end","readAsBinaryString","event","target","id","this","forEach","i","handleDrop","data-open","data-close","htmlFor","type","title","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.916a1cd9.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\nimport ReactDOM from 'react-dom';\nimport { useDropzone } from 'react-dropzone'\nimport './index.css';\nconst parse = require('csv-parse')\nconst iconv = require(\"iconv-lite\");\n\nfunction MyDropzone(props: any) {\n  const onDrop = useCallback(props.onDrop, [])\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n  return (\n    <div {...getRootProps({ className: 'dropzone' })}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <p>ファイルを開く ...</p> :\n          <p>CSVファイルをドロップ。もしくはクリックして選択。</p>\n      }\n    </div>\n  )\n}\n\nfunction invert<S, T>(keys: S[], values: T[][]): Map<T, S[]> {\n  let uniq_values = new Set<T>(values.reduce((sum, e) => sum.concat(e), []));\n  const all_values = Array.from(uniq_values).sort()\n  const inverted = new Map<T, S[]>(all_values.map(value => [value, []]));\n  keys.map((key, key_index) => values[key_index].map(value => inverted.get(value)!.push(key)))\n  return inverted;\n}\n\ninterface AppProps {\n  col_key: string,\n  col_value: string,\n  rows: Map<string, string[]>,\n}\n\nclass App extends React.Component<any, AppProps> {\n  constructor(props: AppProps) {\n    super(props)\n    this.state = {\n      col_key: 'MLアドレス',\n      col_value: 'MLメンバー',\n      rows: new Map<string, string[]>([['',['']]]), // initialize rows with one entry to show empty table in the page\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleDrop(acceptedFiles: File[]) {\n    const file = acceptedFiles[0];\n    const reader = new FileReader()\n\n    reader.onabort = () => alert('file reading was aborted')\n    reader.onerror = () => alert('file reading has failed')\n    reader.onload = () => {\n      // Do whatever you want with the file contents\n      const binaryStr = reader.result\n      const decodedStr = iconv.decode(binaryStr, \"windows-31j\")\n\n      let header: string[] = [];\n      const body: string[][] = [];\n\n      // Create the parser\n      const parser = parse({\n        delimiter: ',',\n        skipEmptyLines: true,\n      })\n      // Use the readable stream api\n      parser.on('readable', () => {\n        let record: string[];\n        while (Boolean(record = parser.read())) {\n          if (header.length === 0) {\n            header = record;\n          } else {\n            body.push(record);\n          }\n        }\n      })\n      // Catch any error\n      parser.on('error', (err: any) => {\n        alert(err.message)\n      })\n\n\n      parser.on('end', () => {\n        console.log(header)\n        const key_col_name = this.state.col_key;\n        const value_col_name = this.state.col_value;\n        const col_ml_addr = header.findIndex(name => name === key_col_name);\n        if (col_ml_addr === -1) {\n          alert('Could not find column ' + key_col_name);\n          return;\n        }\n        const col_ml_member = header.findIndex(name => name === value_col_name);\n        if (col_ml_member === -1) {\n          alert('Could not find column ' + value_col_name);\n          return;\n        }\n        const ml_addrs = body.map(row => row[col_ml_addr])\n        const members = body.map(row => row[col_ml_member].split('\\n').filter(e => e.length > 0))\n        const addr2ml = invert(ml_addrs, members)\n        this.setState({\n          rows: addr2ml,\n        });\n      })\n\n      parser.write(decodedStr)\n      parser.end()\n    }\n    reader.readAsBinaryString(file)\n  }\n\n  handleChange<T extends keyof AppProps, K extends AppProps[T]>(event: React.ChangeEvent<HTMLInputElement>) {\n    const { target: { id, value } } = event;\n    this.setState({ [id]: value } as unknown as Pick<AppProps, keyof AppProps>); // TODO: remove unknown\n  }\n\n  render() {\n    const rows = Array<React.ReactElement>();\n    this.state.rows.forEach((value, key) => {\n      rows.push(\n        <tr key={key}>\n          <td>{key}</td>\n          <td>\n            <ol>\n              {value.map((e, i) => (<li key={i}>{e}</li>))}\n            </ol>\n          </td>\n        </tr>\n      )\n    })\n    const header = (\n      <thead>\n        <tr>\n          <th>{this.state.col_value}</th>\n          <th>{this.state.col_key}</th>\n        </tr>\n      </thead>\n    )\n    return (\n      <div>\n        <MyDropzone\n          onDrop={(acceptedFiles: File[]) => this.handleDrop(acceptedFiles)} />\n        <h2>結果</h2>\n        <table>\n          {header}\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n        <h2>設定</h2>\n        <details className=\"config\">\n          <summary data-open=\"閉じる\" data-close=\"開く\"></summary>\n          <div id=\"configs\">\n            <div className=\"row\">\n              <label htmlFor=\"col_key\">メーリングリストのヘッダ</label>\n              <input type=\"text\" title='メーリングリストのヘッダ' id=\"col_key\" value={this.state.col_key} onChange={this.handleChange} />\n            </div>\n            <div className=\"row\">\n              <label htmlFor=\"col_value\">メールアドレスのヘッダ</label>\n              <input type=\"text\" title='メールアドレスのヘッダ' id=\"col_value\" value={this.state.col_value} onChange={this.handleChange} />\n            </div>\n          </div>\n        </details>\n\n      </div>\n    )\n  }\n\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}