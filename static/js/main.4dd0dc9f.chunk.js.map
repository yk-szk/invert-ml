{"version":3,"sources":["index.tsx"],"names":["MyDropzone","props","onDrop","useCallback","useDropzone","getRootProps","getInputProps","isDragActive","className","App","state","col_key","col_value","rows","Map","error","handleChange","bind","acceptedFiles","file","reader","FileReader","onabort","alert","onerror","onload","result","ArrayBuffer","binary","decodedStr","iconv","decode","Buffer","from","header","body","parser","parse","delimiter","skip_empty_lines","on","record","Boolean","read","length","push","err","setState","message","console","log","key_col_name","value_col_name","col_ml_addr","findIndex","name","col_ml_member","addr2ml","keys","values","uniq_values","Set","reduce","sum","e","concat","all_values","Array","sort","inverted","map","value","key","key_index","get","invert","row","split","filter","join","write","end","readAsArrayBuffer","event","target","id","this","forEach","i","handleDrop","open","data-open","data-close","htmlFor","type","title","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4dd0dc9f.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\nimport ReactDOM from 'react-dom';\nimport { useDropzone } from 'react-dropzone'\nimport iconv from \"iconv-lite\";\nimport parse from 'csv-parse'\nimport './index.css';\n\nfunction MyDropzone(props: any) {\n  const onDrop = useCallback(props.onDrop, [])\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n  return (\n    <div {...getRootProps({ className: 'dropzone' })}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <p>ファイルを開く ...</p> :\n          <p>CSVファイルをドロップ。もしくはクリックして選択。</p>\n      }\n    </div>\n  )\n}\n\nfunction invert<S, T>(keys: S[], values: T[][]): Map<T, S[]> {\n  let uniq_values = new Set<T>(values.reduce((sum, e) => sum.concat(e), []));\n  const all_values = Array.from(uniq_values).sort()\n  const inverted = new Map<T, S[]>(all_values.map(value => [value, []]));\n  keys.map((key, key_index) => values[key_index].map(value => inverted.get(value)!.push(key)))\n  return inverted;\n}\n\ninterface AppProps {\n  col_key: string,\n  col_value: string,\n  rows: Map<string, string[]>,\n  error: string,\n}\n\nclass App extends React.Component<any, AppProps> {\n  constructor(props: AppProps) {\n    super(props)\n    this.state = {\n      col_key: 'MLアドレス',\n      col_value: 'MLメンバー',\n      rows: new Map<string, string[]>([['', ['']]]), // initialize rows with one entry to show empty table in the page\n      error: '',\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleDrop(acceptedFiles: File[]) {\n    const file = acceptedFiles[0];\n    const reader = new FileReader()\n\n    reader.onabort = () => alert('file reading was aborted')\n    reader.onerror = () => alert('file reading has failed')\n    reader.onload = () => {\n      // Do whatever you want with the file contents\n      if (!(reader.result instanceof ArrayBuffer)) {\n        this.setState({\n          error: 'Something went wrong with FileReader',\n        })\n        return;\n      }\n      const binary = reader.result;\n      const decodedStr = iconv.decode(Buffer.from(binary), \"windows-31j\")\n\n      let header: string[] = [];\n      const body: string[][] = [];\n\n      // Create the parser\n      const parser = parse({\n        delimiter: ',',\n        skip_empty_lines: true,\n      })\n      // Use the readable stream api\n      parser.on('readable', () => {\n        let record: string[];\n        while (Boolean(record = parser.read())) {\n          if (header.length === 0) {\n            header = record;\n          } else {\n            body.push(record);\n          }\n        }\n      })\n      // Catch any error\n      parser.on('error', (err: any) => {\n        this.setState({\n          error: 'CSVのパースに失敗しました。' + err.message,\n        })\n      })\n\n      parser.on('end', () => {\n        console.log(header)\n        const key_col_name = this.state.col_key;\n        const value_col_name = this.state.col_value;\n        const col_ml_addr = header.findIndex(name => name === key_col_name);\n        if (col_ml_addr === -1) {\n          this.setState({\n            error: '[' + key_col_name + ']が見つかりませんでした。ヘッダは次の中から選ぶ必要があります。{' + header.join(', ') + '}',\n          })\n          return;\n        }\n        const col_ml_member = header.findIndex(name => name === value_col_name);\n        if (col_ml_member === -1) {\n          this.setState({\n            error: '[' + value_col_name + ']が見つかりませんでした。ヘッダは次の中から選ぶ必要があります。{' + header.join(', ') + '}',\n          })\n          return;\n        }\n        const ml_addrs = body.map(row => row[col_ml_addr])\n        const members = body.map(row => row[col_ml_member].split('\\n').filter(e => e.length > 0))\n        const addr2ml = invert(ml_addrs, members)\n        this.setState({\n          rows: addr2ml,\n          error: '',\n        });\n      })\n      parser.write(decodedStr)\n      parser.end()\n    }\n    reader.readAsArrayBuffer(file)\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { target: { id, value } } = event;\n    this.setState({ [id]: value } as unknown as Pick<AppProps, keyof AppProps>); // TODO: remove unknown\n  }\n\n  render() {\n    let result: React.ReactElement;\n    if (this.state.error !== '') {\n      result = (\n        <div>\n          <h2 className=\"error\">エラー</h2>\n          <div className=\"error\">\n            <p>\n              {this.state.error}\n            </p>\n          </div>\n        </div>\n      )\n    } else {\n      const rows = Array<React.ReactElement>();\n      this.state.rows.forEach((value, key) => {\n        rows.push(\n          <tr key={key}>\n            <td>{key}</td>\n            <td>\n              <ol>\n                {value.map((e, i) => (<li key={i}>{e}</li>))}\n              </ol>\n            </td>\n          </tr>\n        )\n      })\n      const header = (\n        <thead>\n          <tr>\n            <th>{this.state.col_value}</th>\n            <th>{this.state.col_key}</th>\n          </tr>\n        </thead>\n      )\n      result = (\n        <div>\n          <h2>結果</h2>\n          <table className=\"result\">\n            {header}\n            <tbody>\n              {rows}\n            </tbody>\n          </table>\n        </div>\n      )\n    }\n    return (\n      <div className=\"container\">\n        <MyDropzone\n          onDrop={(acceptedFiles: File[]) => this.handleDrop(acceptedFiles)} />\n        {result}\n        <h2>設定</h2>\n        <details className=\"dynamic\" open={this.state.error !== \"\"}>\n          <summary data-open=\"閉じる\" data-close=\"開く\"></summary>\n          <table className=\"config\">\n            <tbody>\n              <tr>\n                <td>\n                  <label htmlFor=\"col_key\">メーリングリストのヘッダ</label>\n                </td>\n                <td>\n                  <input type=\"text\" title='メーリングリストのヘッダ' id=\"col_key\" value={this.state.col_key} onChange={this.handleChange} />\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <label htmlFor=\"col_value\">メールアドレスのヘッダ</label>\n                </td>\n                <td>\n                  <input type=\"text\" title='メールアドレスのヘッダ' id=\"col_value\" value={this.state.col_value} onChange={this.handleChange} />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </details>\n\n      </div>\n    )\n  }\n\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}