{"version":3,"sources":["index.tsx"],"names":["MyDropzone","props","onDrop","useCallback","useDropzone","getRootProps","getInputProps","isDragActive","className","PRESETS","name","cols","key","value","equal_cols","c1","c2","App","state","preset_disabled","map","preset","result","handleChange","bind","handleButtonClick","acceptedFiles","file","reader","FileReader","onabort","alert","onerror","onload","ArrayBuffer","binary","decodedStr","iconv","decode","Buffer","from","header","body","parser","parse","delimiter","skip_empty_lines","on","record","Boolean","read","length","push","err","setState","message","console","log","key_col_name","value_col_name","col_ml_addr","findIndex","col_ml_member","addr2ml","keys","values","uniq_values","Set","reduce","sum","e","concat","all_values","Array","sort","inverted","Map","key_index","get","invert","row","split","filter","join","write","end","readAsArrayBuffer","event","target","id","this","currentTarget","button_index","parseInt","replace","fill","rows","forEach","i","buttons","index","p","attributes","String","disabled","onClick","title","handleDrop","open","data-open","data-close","htmlFor","type","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c903821.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\nimport ReactDOM from 'react-dom';\nimport { useDropzone } from 'react-dropzone'\nimport iconv from \"iconv-lite\";\nimport parse from 'csv-parse'\nimport './index.css';\n\nfunction MyDropzone(props: any) {\n  const onDrop = useCallback(props.onDrop, [])\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n  return (\n    <div {...getRootProps({ className: 'dropzone' })}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <p>ファイルを開く ...</p> :\n          <p>CSVファイルをドロップ。もしくはクリックして選択。</p>\n      }\n    </div>\n  )\n}\n\nfunction invert<S, T>(keys: S[], values: T[][]): Map<T, S[]> {\n  let uniq_values = new Set<T>(values.reduce((sum, e) => sum.concat(e), []));\n  const all_values = Array.from(uniq_values).sort()\n  const inverted = new Map<T, S[]>(all_values.map(value => [value, []]));\n  keys.map((key, key_index) => values[key_index].map(value => inverted.get(value)!.push(key)))\n  return inverted;\n}\n\ntype ColumnsType = { key: string, value: string };\ntype ResultType = Map<string, string[]> | string | null;\ninterface AppState {\n  cols: ColumnsType,\n  preset_disabled: boolean[],\n  result: ResultType,\n}\n\ntype PresetType = { name: string, cols: ColumnsType };\nconst PRESETS: ReadonlyArray<PresetType> = [\n  { name: '統計確認', cols: { key: 'MLアドレス', value: 'MLメンバー' } },\n  { name: 'ML管理', cols: { key: 'MLメールアドレス(編集不可)', value: 'メンバー' } }\n];\nconst PRESET_BUTTON_PREFIX = 'btn_preset';\n\nfunction describe_preset_button(p: ColumnsType) {\n  return '\"' + p.key + '\"と\"' + p.value + '\"をセットします。';\n}\nfunction equal_cols(c1: ColumnsType, c2: ColumnsType) {\n  return c1.key === c2.key && c1.value === c2.value;\n}\n\nclass App extends React.Component<{}, AppState> {\n\n  constructor(props: {}) {\n    super(props)\n    this.state = {\n      cols: PRESETS[0].cols,\n      preset_disabled: PRESETS.map(preset => equal_cols(preset.cols, PRESETS[0].cols)),\n      result: null,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n\n  handleDrop(acceptedFiles: File[]) {\n    const file = acceptedFiles[0];\n    const reader = new FileReader()\n\n    reader.onabort = () => alert('file reading was aborted')\n    reader.onerror = () => alert('file reading has failed')\n    reader.onload = () => {\n      // Do whatever you want with the file contents\n      if (!(reader.result instanceof ArrayBuffer)) {\n        this.setState({\n          result: 'Something went wrong with FileReader',\n        })\n        return;\n      }\n      const binary = reader.result;\n      const decodedStr = iconv.decode(Buffer.from(binary), \"windows-31j\")\n\n      let header: string[] = [];\n      const body: string[][] = [];\n\n      // Create the parser\n      const parser = parse({\n        delimiter: ',',\n        skip_empty_lines: true,\n      })\n      // Use the readable stream api\n      parser.on('readable', () => {\n        let record: string[];\n        while (Boolean(record = parser.read())) {\n          if (header.length === 0) {\n            header = record;\n          } else {\n            body.push(record);\n          }\n        }\n      })\n      // Catch any error\n      parser.on('error', (err: any) => {\n        this.setState({\n          result: 'CSVのパースに失敗しました。' + err.message,\n        })\n      })\n\n      parser.on('end', () => {\n        console.log(header)\n        const key_col_name = this.state.cols.key;\n        const value_col_name = this.state.cols.value;\n        const col_ml_addr = header.findIndex(name => name === key_col_name);\n        if (col_ml_addr === -1) {\n          this.setState({\n            result: '[' + key_col_name + ']が見つかりませんでした。ヘッダは次の中から選ぶ必要があります。{' + header.join(', ') + '}',\n          })\n          return;\n        }\n        const col_ml_member = header.findIndex(name => name === value_col_name);\n        if (col_ml_member === -1) {\n          this.setState({\n            result: '[' + value_col_name + ']が見つかりませんでした。ヘッダは次の中から選ぶ必要があります。{' + header.join(', ') + '}',\n          })\n          return;\n        }\n        const ml_addrs = body.map(row => row[col_ml_addr])\n        const members = body.map(row => row[col_ml_member].split('\\n').filter(e => e.length > 0))\n        const addr2ml = invert(ml_addrs, members)\n        this.setState({\n          result: addr2ml,\n        });\n      })\n      parser.write(decodedStr)\n      parser.end()\n    }\n    reader.readAsArrayBuffer(file)\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { target: { id, value } } = event;\n    const cols: ColumnsType = { ...this.state.cols };\n    if (id === 'col_key') {\n      cols.key = value;\n    }\n    if (id === 'col_value') {\n      cols.value = value;\n    }\n    this.setState({\n      cols: cols,\n      preset_disabled: PRESETS.map(preset => equal_cols(preset.cols, PRESETS[0].cols)),\n    })\n  }\n\n  handleButtonClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    const id = event.currentTarget.id;\n    const button_index = parseInt(id.replace(PRESET_BUTTON_PREFIX, ''));\n    let preset_disabled = Array<boolean>(PRESETS.length).fill(false);\n    preset_disabled[button_index] = true;\n    this.setState({\n      cols: PRESETS[button_index].cols,\n      preset_disabled: preset_disabled,\n    })\n  }\n\n  render() {\n    let result: React.ReactElement;\n    if (typeof this.state.result === 'string') {\n      result = (\n        <div>\n          <h2 className=\"error\">エラー</h2>\n          <div className=\"error\">\n            <p>\n              {this.state.result}\n            </p>\n          </div>\n        </div>\n      )\n    } else {\n      const rows = Array<React.ReactElement>();\n      if (this.state.result === null) {\n        rows.push(\n          <tr key='0'>\n            <td></td>\n            <td></td>\n          </tr>\n        )\n      } else {\n        this.state.result.forEach((value, key) => {\n          rows.push(\n            <tr key={key}>\n              <td>{key}</td>\n              <td>\n                <ol>\n                  {value.map((e, i) => (<li key={i}>{e}</li>))}\n                </ol>\n              </td>\n            </tr>\n          )\n        })\n      }\n      const header = (\n        <thead>\n          <tr>\n            <th>{this.state.cols.key}</th>\n            <th>{this.state.cols.value}</th>\n          </tr>\n        </thead>\n      )\n      result = (\n        <div>\n          <h2>結果</h2>\n          <table className=\"result\">\n            {header}\n            <tbody>\n              {rows}\n            </tbody>\n          </table>\n        </div>\n      )\n    }\n    const buttons = this.state.preset_disabled.map((preset_disabled, index) => {\n      const attributes = {\n        id: \"btn_preset\" + String(index),\n        key: index,\n        disabled: preset_disabled,\n        onClick: this.handleButtonClick,\n        title: preset_disabled ? \"すでにセットされています。\" : describe_preset_button(PRESETS[index].cols),\n      };\n      return <button {...attributes}>プリセット{index + 1}({PRESETS[index].name})</button>\n    })\n    return (\n      <div className=\"container\">\n        <MyDropzone\n          onDrop={(acceptedFiles: File[]) => this.handleDrop(acceptedFiles)} />\n        {result}\n        <h2>設定</h2>\n        <details className=\"dynamic\" open={typeof this.state.result !== 'string'}>\n          <summary data-open=\"閉じる\" data-close=\"開く\"></summary>\n          <table className=\"config\">\n            <tbody>\n              <tr>\n                <td>\n                  <label htmlFor=\"col_key\">メーリングリストのヘッダ</label>\n                </td>\n                <td>\n                  <input type=\"text\" id=\"col_key\" value={this.state.cols.key} onChange={this.handleChange} />\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <label htmlFor=\"col_value\">メールアドレスのヘッダ</label>\n                </td>\n                <td>\n                  <input type=\"text\" id=\"col_value\" value={this.state.cols.value} onChange={this.handleChange} />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          {buttons}\n        </details>\n\n      </div>\n    )\n  }\n\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}