{"version":3,"sources":["index.tsx"],"names":["parse","require","iconv","MyDropzone","props","onDrop","useCallback","useDropzone","getRootProps","getInputProps","isDragActive","className","App","state","header","rows","Map","acceptedFiles","file","reader","FileReader","onabort","alert","onerror","onload","binaryStr","result","decodedStr","decode","body","parser","delimiter","skipEmptyLines","on","record","Boolean","read","length","push","err","message","console","log","col_ml_addr","findIndex","name","col_ml_member","addr2ml","keys","values","uniq_values","Set","reduce","sum","e","concat","all_values","Array","from","sort","inverted","map","value","key","key_index","get","invert","row","split","filter","setState","write","end","readAsBinaryString","this","forEach","i","handleDrop","React","Component","ReactDOM","render","document","getElementById"],"mappings":"yPAIMA,G,MAAQC,EAAQ,KAChBC,EAAQD,EAAQ,IAEtB,SAASE,EAAWC,GAClB,IAAMC,EAASC,sBAAYF,EAAMC,OAAQ,IADX,EAGwBE,YAAY,CAAEF,WAA5DG,EAHsB,EAGtBA,aAAcC,EAHQ,EAGRA,cAAeC,EAHP,EAGOA,aAErC,OACE,wBAASF,EAAa,CAAEG,UAAW,aACjC,0BAAWF,KAETC,EACE,6EACA,6K,IAmBJE,E,kDACJ,WAAYR,GAAkB,IAAD,8BAC3B,cAAMA,IACDS,MAAQ,CACXC,OAAQ,CAAC,6CAAW,oDACpBC,KAAM,IAAIC,KAJe,E,uDAQlBC,GAAwB,IAAD,OAC1BC,EAAOD,EAAc,GACrBE,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMC,MAAM,6BAC7BH,EAAOI,QAAU,kBAAMD,MAAM,4BAC7BH,EAAOK,OAAS,WAEd,IAAMC,EAAYN,EAAOO,OACnBC,EAAazB,EAAM0B,OAAOH,EAAW,eAEvCX,EAAmB,GACjBe,EAAmB,GAGnBC,EAAS9B,EAAM,CACnB+B,UAAW,IACXC,gBAAgB,IAGlBF,EAAOG,GAAG,YAAY,WAEpB,IADA,IAAIC,EACGC,QAAQD,EAASJ,EAAOM,SACP,IAAlBtB,EAAOuB,OACTvB,EAASoB,EAETL,EAAKS,KAAKJ,MAKhBJ,EAAOG,GAAG,SAAS,SAACM,GAClBjB,MAAMiB,EAAIC,YAIZV,EAAOG,GAAG,OAAO,WACfQ,QAAQC,IAAI5B,GACZ,IAEM6B,EAAc7B,EAAO8B,WAAU,SAAAC,GAAI,MAFpB,+BAEwBA,KAC7C,IAAqB,IAAjBF,EAAJ,CAIA,IAAMG,EAAgBhC,EAAO8B,WAAU,SAAAC,GAAI,MANpB,+BAMwBA,KAC/C,IAAuB,IAAnBC,EAAJ,CAIA,IAEMC,EA1Ed,SAAsBC,EAAWC,GAC/B,IAAIC,EAAc,IAAIC,IAAOF,EAAOG,QAAO,SAACC,EAAKC,GAAN,OAAYD,EAAIE,OAAOD,KAAI,KAChEE,EAAaC,MAAMC,KAAKR,GAAaS,OACrCC,EAAW,IAAI5C,IAAYwC,EAAWK,KAAI,SAAAC,GAAK,MAAI,CAACA,EAAO,QAEjE,OADAd,EAAKa,KAAI,SAACE,EAAKC,GAAN,OAAoBf,EAAOe,GAAWH,KAAI,SAAAC,GAAK,OAAIF,EAASK,IAAIH,GAAQxB,KAAKyB,SAC/EH,EAqEeM,CAFCrC,EAAKgC,KAAI,SAAAM,GAAG,OAAIA,EAAIxB,MACrBd,EAAKgC,KAAI,SAAAM,GAAG,OAAIA,EAAIrB,GAAesB,MAAM,MAAMC,QAAO,SAAAf,GAAC,OAAIA,EAAEjB,OAAS,SAEtF,EAAKiC,SAAS,CACZvD,KAAMgC,SAPNzB,MAAM,yDALNA,MAAM,uDAgBVQ,EAAOyC,MAAM5C,GACbG,EAAO0C,OAETrD,EAAOsD,mBAAmBvD,K,+BAGlB,IAAD,OACDH,EAAO0C,QACbiB,KAAK7D,MAAME,KAAK4D,SAAQ,SAACb,EAAOC,GAC9BhD,EAAKuB,KACH,wBAAIyB,IAAKA,GACP,4BAAKA,GACL,4BACE,4BACGD,EAAMD,KAAI,SAACP,EAAGsB,GAAJ,OAAW,wBAAIb,IAAKa,GAAItB,aAM7C,IAAMxC,EACJ,+BACE,4BACE,4BAAK4D,KAAK7D,MAAMC,OAAO,IACvB,4BAAK4D,KAAK7D,MAAMC,OAAO,MAI7B,OACE,6BACE,kBAACX,EAAD,CACEE,OAAQ,SAACY,GAAD,OAA2B,EAAK4D,WAAW5D,MACrD,4CACA,+BACGH,EACD,+BACGC,S,GAvGK+D,IAAMC,WAgHxBC,IAASC,OACP,kBAACrE,EAAD,MACAsE,SAASC,eAAe,U","file":"static/js/main.b542848b.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\nimport ReactDOM from 'react-dom';\nimport { useDropzone } from 'react-dropzone'\nimport './index.css';\nconst parse = require('csv-parse')\nconst iconv = require(\"iconv-lite\");\n\nfunction MyDropzone(props: any) {\n  const onDrop = useCallback(props.onDrop, [])\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n  return (\n    <div {...getRootProps({ className: 'dropzone' })}>\n      <input {...getInputProps()} />\n      {\n        isDragActive ?\n          <p>ファイルを開く ...</p> :\n          <p>CSVファイルをドロップ。もしくはクリックして選択。</p>\n      }\n    </div>\n  )\n}\n\nfunction invert<S, T>(keys: S[], values: T[][]): Map<T, S[]> {\n  let uniq_values = new Set<T>(values.reduce((sum, e) => sum.concat(e), []));\n  const all_values = Array.from(uniq_values).sort()\n  const inverted = new Map<T, S[]>(all_values.map(value => [value, []]));\n  keys.map((key, key_index) => values[key_index].map(value => inverted.get(value)!.push(key)))\n  return inverted;\n}\n\ninterface AppProps {\n  header: string[],\n  rows: Map<string, string[]>,\n}\n\nclass App extends React.Component<any, AppProps> {\n  constructor(props: AppProps) {\n    super(props)\n    this.state = {\n      header: ['メールアドレス', 'メーリングリスト'],\n      rows: new Map<string, string[]>(),\n    }\n  }\n\n  handleDrop(acceptedFiles: File[]) {\n    const file = acceptedFiles[0];\n    const reader = new FileReader()\n\n    reader.onabort = () => alert('file reading was aborted')\n    reader.onerror = () => alert('file reading has failed')\n    reader.onload = () => {\n      // Do whatever you want with the file contents\n      const binaryStr = reader.result\n      const decodedStr = iconv.decode(binaryStr, \"windows-31j\")\n\n      let header: string[] = [];\n      const body: string[][] = [];\n\n      // Create the parser\n      const parser = parse({\n        delimiter: ',',\n        skipEmptyLines: true,\n      })\n      // Use the readable stream api\n      parser.on('readable', () => {\n        let record: string[];\n        while (Boolean(record = parser.read())) {\n          if (header.length === 0) {\n            header = record;\n          } else {\n            body.push(record);\n          }\n        }\n      })\n      // Catch any error\n      parser.on('error', (err: any) => {\n        alert(err.message)\n      })\n\n\n      parser.on('end', () => {\n        console.log(header)\n        const key_col_name = 'MLアドレス';\n        const value_col_name = 'MLメンバー';\n        const col_ml_addr = header.findIndex(name => name === key_col_name);\n        if (col_ml_addr === -1) {\n          alert('Could not find column ' + key_col_name);\n          return;\n        }\n        const col_ml_member = header.findIndex(name => name === value_col_name);\n        if (col_ml_member === -1) {\n          alert('Could not find column ' + value_col_name);\n          return;\n        }\n        const ml_addrs = body.map(row => row[col_ml_addr])\n        const members = body.map(row => row[col_ml_member].split('\\n').filter(e => e.length > 0))\n        const addr2ml = invert(ml_addrs, members)\n        this.setState({\n          rows: addr2ml,\n        });\n      })\n\n      parser.write(decodedStr)\n      parser.end()\n    }\n    reader.readAsBinaryString(file)\n  }\n\n  render() {\n    const rows = Array<React.ReactElement>();\n    this.state.rows.forEach((value, key) => {\n      rows.push(\n        <tr key={key}>\n          <td>{key}</td>\n          <td>\n            <ol>\n              {value.map((e, i) => (<li key={i}>{e}</li>))}\n            </ol>\n          </td>\n        </tr>\n      )\n    })\n    const header = (\n      <thead>\n        <tr>\n          <th>{this.state.header[0]}</th>\n          <th>{this.state.header[1]}</th>\n        </tr>\n      </thead>\n    )\n    return (\n      <div>\n        <MyDropzone\n          onDrop={(acceptedFiles: File[]) => this.handleDrop(acceptedFiles)} />\n        <h2>結果</h2>\n        <table>\n          {header}\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}