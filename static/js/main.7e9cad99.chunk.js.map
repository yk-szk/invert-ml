{"version":3,"sources":["index.tsx"],"names":["MyDropzone","props","onDrop","useCallback","useDropzone","getRootProps","getInputProps","isDragActive","className","App","state","col_key","col_value","rows","Map","error","handleChange","bind","acceptedFiles","file","reader","FileReader","onabort","alert","onerror","onload","result","ArrayBuffer","binary","decodedStr","iconv","decode","Buffer","from","header","body","parser","parse","delimiter","skip_empty_lines","on","record","Boolean","read","length","push","err","setState","message","console","log","key_col_name","value_col_name","col_ml_addr","findIndex","name","col_ml_member","addr2ml","keys","values","uniq_values","Set","reduce","sum","e","concat","all_values","Array","sort","inverted","map","value","key","key_index","get","invert","row","split","filter","join","write","end","readAsArrayBuffer","event","target","id","this","forEach","i","handleDrop","open","data-open","data-close","htmlFor","type","title","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e9cad99.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport { useDropzone } from 'react-dropzone'\r\nimport iconv from \"iconv-lite\";\r\nimport parse from 'csv-parse'\r\nimport './index.css';\r\n\r\nfunction MyDropzone(props: any) {\r\n  const onDrop = useCallback(props.onDrop, [])\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n  return (\r\n    <div {...getRootProps({ className: 'dropzone' })}>\r\n      <input {...getInputProps()} />\r\n      {\r\n        isDragActive ?\r\n          <p>ファイルを開く ...</p> :\r\n          <p>CSVファイルをドロップ。もしくはクリックして選択。</p>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction invert<S, T>(keys: S[], values: T[][]): Map<T, S[]> {\r\n  let uniq_values = new Set<T>(values.reduce((sum, e) => sum.concat(e), []));\r\n  const all_values = Array.from(uniq_values).sort()\r\n  const inverted = new Map<T, S[]>(all_values.map(value => [value, []]));\r\n  keys.map((key, key_index) => values[key_index].map(value => inverted.get(value)!.push(key)))\r\n  return inverted;\r\n}\r\n\r\ninterface AppProps {\r\n  col_key: string,\r\n  col_value: string,\r\n  rows: Map<string, string[]>,\r\n  error: string,\r\n}\r\n\r\nclass App extends React.Component<any, AppProps> {\r\n  constructor(props: AppProps) {\r\n    super(props)\r\n    this.state = {\r\n      col_key: 'MLアドレス',\r\n      col_value: 'MLメンバー',\r\n      rows: new Map<string, string[]>([['', ['']]]), // initialize rows with one entry to show empty table in the page\r\n      error: '',\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleDrop(acceptedFiles: File[]) {\r\n    const file = acceptedFiles[0];\r\n    const reader = new FileReader()\r\n\r\n    reader.onabort = () => alert('file reading was aborted')\r\n    reader.onerror = () => alert('file reading has failed')\r\n    reader.onload = () => {\r\n      // Do whatever you want with the file contents\r\n      if (!(reader.result instanceof ArrayBuffer)) {\r\n        this.setState({\r\n          error: 'Something went wrong with FileReader',\r\n        })\r\n        return;\r\n      }\r\n      const binary = reader.result;\r\n      const decodedStr = iconv.decode(Buffer.from(binary), \"windows-31j\")\r\n\r\n      let header: string[] = [];\r\n      const body: string[][] = [];\r\n\r\n      // Create the parser\r\n      const parser = parse({\r\n        delimiter: ',',\r\n        skip_empty_lines: true,\r\n      })\r\n      // Use the readable stream api\r\n      parser.on('readable', () => {\r\n        let record: string[];\r\n        while (Boolean(record = parser.read())) {\r\n          if (header.length === 0) {\r\n            header = record;\r\n          } else {\r\n            body.push(record);\r\n          }\r\n        }\r\n      })\r\n      // Catch any error\r\n      parser.on('error', (err: any) => {\r\n        this.setState({\r\n          error: 'CSVのパースに失敗しました。' + err.message,\r\n        })\r\n      })\r\n\r\n      parser.on('end', () => {\r\n        console.log(header)\r\n        const key_col_name = this.state.col_key;\r\n        const value_col_name = this.state.col_value;\r\n        const col_ml_addr = header.findIndex(name => name === key_col_name);\r\n        if (col_ml_addr === -1) {\r\n          this.setState({\r\n            error: '[' + key_col_name + ']が見つかりませんでした。ヘッダは次の中から選ぶ必要があります。{' + header.join(', ') + '}',\r\n          })\r\n          return;\r\n        }\r\n        const col_ml_member = header.findIndex(name => name === value_col_name);\r\n        if (col_ml_member === -1) {\r\n          this.setState({\r\n            error: '[' + value_col_name + ']が見つかりませんでした。ヘッダは次の中から選ぶ必要があります。{' + header.join(', ') + '}',\r\n          })\r\n          return;\r\n        }\r\n        const ml_addrs = body.map(row => row[col_ml_addr])\r\n        const members = body.map(row => row[col_ml_member].split('\\n').filter(e => e.length > 0))\r\n        const addr2ml = invert(ml_addrs, members)\r\n        this.setState({\r\n          rows: addr2ml,\r\n          error: '',\r\n        });\r\n      })\r\n      parser.write(decodedStr)\r\n      parser.end()\r\n    }\r\n    reader.readAsArrayBuffer(file)\r\n  }\r\n\r\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const { target: { id, value } } = event;\r\n    this.setState({ [id]: value } as unknown as Pick<AppProps, keyof AppProps>); // TODO: remove unknown\r\n  }\r\n\r\n  render() {\r\n    let result: React.ReactElement;\r\n    if (this.state.error !== '') {\r\n      result = (\r\n        <div>\r\n          <h2 className=\"error\">エラー</h2>\r\n          <div className=\"error\">\r\n            <p>\r\n              {this.state.error}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      const rows = Array<React.ReactElement>();\r\n      this.state.rows.forEach((value, key) => {\r\n        rows.push(\r\n          <tr key={key}>\r\n            <td>{key}</td>\r\n            <td>\r\n              <ol>\r\n                {value.map((e, i) => (<li key={i}>{e}</li>))}\r\n              </ol>\r\n            </td>\r\n          </tr>\r\n        )\r\n      })\r\n      const header = (\r\n        <thead>\r\n          <tr>\r\n            <th>{this.state.col_value}</th>\r\n            <th>{this.state.col_key}</th>\r\n          </tr>\r\n        </thead>\r\n      )\r\n      result = (\r\n        <div>\r\n          <h2>結果</h2>\r\n          <table className=\"result\">\r\n            {header}\r\n            <tbody>\r\n              {rows}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <MyDropzone\r\n          onDrop={(acceptedFiles: File[]) => this.handleDrop(acceptedFiles)} />\r\n        {result}\r\n        <h2>設定</h2>\r\n        <details className=\"dynamic\" open={this.state.error !== \"\"}>\r\n          <summary data-open=\"閉じる\" data-close=\"開く\"></summary>\r\n          <table className=\"config\">\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <label htmlFor=\"col_key\">メーリングリストのヘッダ</label>\r\n                </td>\r\n                <td>\r\n                  <input type=\"text\" title='メーリングリストのヘッダ' id=\"col_key\" value={this.state.col_key} onChange={this.handleChange} />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <label htmlFor=\"col_value\">メールアドレスのヘッダ</label>\r\n                </td>\r\n                <td>\r\n                  <input type=\"text\" title='メールアドレスのヘッダ' id=\"col_value\" value={this.state.col_value} onChange={this.handleChange} />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </details>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}