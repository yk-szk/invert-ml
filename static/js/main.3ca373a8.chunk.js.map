{"version":3,"sources":["index.tsx"],"names":["MyDropzone","props","onDrop","useCallback","useDropzone","getRootProps","getInputProps","isDragActive","className","App","state","col_key","col_value","rows","Map","handleChange","bind","acceptedFiles","file","reader","FileReader","onabort","alert","onerror","onload","result","ArrayBuffer","binary","decodedStr","iconv","decode","Buffer","from","header","body","parser","parse","delimiter","skip_empty_lines","on","record","Boolean","read","length","push","err","message","console","log","key_col_name","value_col_name","col_ml_addr","findIndex","name","col_ml_member","addr2ml","keys","values","uniq_values","Set","reduce","sum","e","concat","all_values","Array","sort","inverted","map","value","key","key_index","get","invert","row","split","filter","setState","write","end","readAsArrayBuffer","event","target","id","this","forEach","i","handleDrop","data-open","data-close","htmlFor","type","title","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ca373a8.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport { useDropzone } from 'react-dropzone'\r\nimport iconv from \"iconv-lite\";\r\nimport parse from 'csv-parse'\r\nimport './index.css';\r\n\r\nfunction MyDropzone(props: any) {\r\n  const onDrop = useCallback(props.onDrop, [])\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n  return (\r\n    <div {...getRootProps({ className: 'dropzone' })}>\r\n      <input {...getInputProps()} />\r\n      {\r\n        isDragActive ?\r\n          <p>ファイルを開く ...</p> :\r\n          <p>CSVファイルをドロップ。もしくはクリックして選択。</p>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction invert<S, T>(keys: S[], values: T[][]): Map<T, S[]> {\r\n  let uniq_values = new Set<T>(values.reduce((sum, e) => sum.concat(e), []));\r\n  const all_values = Array.from(uniq_values).sort()\r\n  const inverted = new Map<T, S[]>(all_values.map(value => [value, []]));\r\n  keys.map((key, key_index) => values[key_index].map(value => inverted.get(value)!.push(key)))\r\n  return inverted;\r\n}\r\n\r\ninterface AppProps {\r\n  col_key: string,\r\n  col_value: string,\r\n  rows: Map<string, string[]>,\r\n}\r\n\r\nclass App extends React.Component<any, AppProps> {\r\n  constructor(props: AppProps) {\r\n    super(props)\r\n    this.state = {\r\n      col_key: 'MLアドレス',\r\n      col_value: 'MLメンバー',\r\n      rows: new Map<string, string[]>([['', ['']]]), // initialize rows with one entry to show empty table in the page\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleDrop(acceptedFiles: File[]) {\r\n    const file = acceptedFiles[0];\r\n    const reader = new FileReader()\r\n\r\n    reader.onabort = () => alert('file reading was aborted')\r\n    reader.onerror = () => alert('file reading has failed')\r\n    reader.onload = () => {\r\n      // Do whatever you want with the file contents\r\n      if (!(reader.result instanceof ArrayBuffer)) {\r\n        alert('Something went wrong with FileReader');\r\n        return;\r\n      }\r\n      const binary = reader.result;\r\n      const decodedStr = iconv.decode(Buffer.from(binary), \"windows-31j\")\r\n\r\n      let header: string[] = [];\r\n      const body: string[][] = [];\r\n\r\n      // Create the parser\r\n      const parser = parse({\r\n        delimiter: ',',\r\n        skip_empty_lines: true,\r\n      })\r\n      // Use the readable stream api\r\n      parser.on('readable', () => {\r\n        let record: string[];\r\n        while (Boolean(record = parser.read())) {\r\n          if (header.length === 0) {\r\n            header = record;\r\n          } else {\r\n            body.push(record);\r\n          }\r\n        }\r\n      })\r\n      // Catch any error\r\n      parser.on('error', (err: any) => {\r\n        alert(err.message)\r\n      })\r\n\r\n\r\n      parser.on('end', () => {\r\n        console.log(header)\r\n        const key_col_name = this.state.col_key;\r\n        const value_col_name = this.state.col_value;\r\n        const col_ml_addr = header.findIndex(name => name === key_col_name);\r\n        if (col_ml_addr === -1) {\r\n          alert('Could not find column ' + key_col_name);\r\n          return;\r\n        }\r\n        const col_ml_member = header.findIndex(name => name === value_col_name);\r\n        if (col_ml_member === -1) {\r\n          alert('Could not find column ' + value_col_name);\r\n          return;\r\n        }\r\n        const ml_addrs = body.map(row => row[col_ml_addr])\r\n        const members = body.map(row => row[col_ml_member].split('\\n').filter(e => e.length > 0))\r\n        const addr2ml = invert(ml_addrs, members)\r\n        this.setState({\r\n          rows: addr2ml,\r\n        });\r\n      })\r\n\r\n      parser.write(decodedStr)\r\n      parser.end()\r\n    }\r\n    reader.readAsArrayBuffer(file)\r\n  }\r\n\r\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const { target: { id, value } } = event;\r\n    this.setState({ [id]: value } as unknown as Pick<AppProps, keyof AppProps>); // TODO: remove unknown\r\n  }\r\n\r\n  render() {\r\n    const rows = Array<React.ReactElement>();\r\n    this.state.rows.forEach((value, key) => {\r\n      rows.push(\r\n        <tr key={key}>\r\n          <td>{key}</td>\r\n          <td>\r\n            <ol>\r\n              {value.map((e, i) => (<li key={i}>{e}</li>))}\r\n            </ol>\r\n          </td>\r\n        </tr>\r\n      )\r\n    })\r\n    const header = (\r\n      <thead>\r\n        <tr>\r\n          <th>{this.state.col_value}</th>\r\n          <th>{this.state.col_key}</th>\r\n        </tr>\r\n      </thead>\r\n    )\r\n    return (\r\n      <div className=\"container\">\r\n        <MyDropzone\r\n          onDrop={(acceptedFiles: File[]) => this.handleDrop(acceptedFiles)} />\r\n        <h2>結果</h2>\r\n        <table className=\"result\">\r\n          {header}\r\n          <tbody>\r\n            {rows}\r\n          </tbody>\r\n        </table>\r\n        <h2>設定</h2>\r\n        <details className=\"dynamic\">\r\n          <summary data-open=\"閉じる\" data-close=\"開く\"></summary>\r\n          <table className=\"config\">\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <label htmlFor=\"col_key\">メーリングリストのヘッダ</label>\r\n                </td>\r\n                <td>\r\n                  <input type=\"text\" title='メーリングリストのヘッダ' id=\"col_key\" value={this.state.col_key} onChange={this.handleChange} />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <label htmlFor=\"col_value\">メールアドレスのヘッダ</label>\r\n                </td>\r\n                <td>\r\n                  <input type=\"text\" title='メールアドレスのヘッダ' id=\"col_value\" value={this.state.col_value} onChange={this.handleChange} />\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </details>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}